os: linux
language: cpp
sudo: required

services:
  - docker

env:
  global:
  - AWS_S3_BUCKET=dl.kuzzle.io
  - AWS_CLOUDFRONT_DISTRIBUTION_ID=E12YL8EZVABYR0
  # AWS ACCESS KEY ID
  - secure: "FNXFRe/5Ddci25oBqrMCjPe1JzfWs0A1b1e9FBMHK3ucx3bsbBLKs1HJWOUvTmWF/ZvvifaqZe1yczjoRfHSZeTNC4GQM1H//KZLU9PVx0FgIKy1AZ4efFftRsYOfQ6YhnPpp6SCeDoViC4bWwS7MxHQw8agvLBetDuV+nUK869DZtzAEw1Q/dThxSOtx/w+3LUibipxtmDpY99tB1+RCag1JyJBLvkkCuOEd/inAcTkLtEMXjIst5IP0pHJWfmVgGFwxclwzvq45qLEaS9cbmWcF9vFTV1eO9ubS27GgdL9Bnt1I0ZRYCrg3xxq8fIHKgmana8Jb9ESrB3QpqcaoVS5j5nR89lHdqHHPESCRghIOADnIqkqLi1+aURmSgQAyWOP4CRZuo1EO+A6Pq0XMisGreMkH1XfyemB6us9hijbSAnBdxAN6JQB0+SsKljIFf44iLilEVt1NzbPj4bxcUwFTZFPSsHKMXXgRgaZ86Gwg5ejuXweL1MPqWztBxn8TgaYR6SwExytD0rvhCMJoO/qyXplQxpuTVd517yL7iOFniMvtkxDTJCAkldj3yF/BnrESqs69R+LCBNorFmjnigyfDlg54FvWik4+QakyNofmB2LVnNBa9z+QB/QwFJcYkJpKLBgSxEEtQRJEVdOhiV8WlR84jmF45TgzRJgDEE="
  # AWS SECRET ACCESS KEY
  - secure: "XFXzbiX3L9yWTM1eZVHNvK9J36V5m02SBZ1SjGKQk6gk1FCBlTk2qimDcjEXRmoFbvSjl66qu2A7JYNyo0+UVAd6xUCKasJeEezElUkYGehXXc65yoSEC2BikIdgMWwl3q/flPBaXyLVCuaczLCY3T7j7d+oT4Zy0GNkqtPMxxe0DhUydyESJ8rVP07s/ai4qoAx9ZYOQ/zAitwZlrUM5SQo1lDSd3zb0mU2nk4WxgnlFZRxukc+fBS/Iz0+t10zcAr4meiAFhmHxu5I/GWo4NvxF2xvenxnN9OMdImrTn+X8kqiM3Zgp5nfxyM2pqeoPitkc8pps/UDiwYa59YC1aG5W05VdvJJYghBNYZXnQYTAcJeNdoMD+Vvg7bnPY8eEV5EcAoM+j8sRiqw+zr5ORtR/qYR98rYtBbYpRE9DAKqx5HIl6aWZIirSP0ChxmM9T4F1z9Nky/xq18hb9ZrTVTN2sOoJNh8c42odHuXlE7IDQqkB8EuY9nC6bIeBaKINtoMr1PZ1DmMdnTWliJdS7rhzKo3n1Ns0NMsLnnELMJXWUZD1LVHXlDT4yRo1ZFQ/bu3uGaaibIG4BZzwjrTQ+8Lnr1+MS5jeD/SkESzr2z8BRn+6Hmomap3BnYQAC565idMVATDAZ6NZh/j/lg5Vbvll0wRkoZR5v5Jgf3hIdE="

stages:
  - name: Builds & Tests

before_install:
  - sudo sysctl -w vm.max_map_count=262144

addons:
  apt:
    packages:
    - python
    - python-pip

install:
  - pip install awscli --upgrade --user

before_script:
  - ./.ci/start_kuzzle.sh

before_deploy:
  - |
    if [[ $TRAVIS_BRANCH =~ ^.?-dev$ ]]; then
      mv ./deploy/kuzzlesdk-*-$ARCH.tar.gz ./deploy/kuzzlesdk-$ARCH-experimental.tar.gz;
    fi;

deploy:
  provider: s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  bucket: $AWS_S3_BUCKET
  region: us-west-2
  skip_cleanup: true
  upload-dir: sdk/cpp/$TRAVIS_BRANCH
  local-dir: deploy
  on:
    all_branches: true
    condition: $COMPILATOR != clang AND $TRAVIS_BRANCH =~ ^master|.?-dev$

after_deploy:
  - aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

jobs:
  include:
# ---------------------------------------------
# GCC: Build, test and deploy (only on master)
# ---------------------------------------------
# AMD64
# ---------------------------------------
    - stage: Builds & Tests
      name: "Build & Tests using GCC/G++ - amd64"
      script:
        # Build & Test
        - docker run --rm -it --network ci_default --link kuzzle -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc make all build_test run_test

      before_deploy:
        - docker run --rm -it -e ARCH=amd64 -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc make package
# ---------------------------------------
# I386
# ---------------------------------------
    - stage: Builds & Tests
      name: "Build & Tests using GCC/G++ - i386"

      script:
        # Build & Test
        - docker run --rm -it --network ci_default --link kuzzle -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc-i386 make all build_test run_test

      before_deploy:
        - docker run --rm -it -e ARCH=i386 -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc-i386 make package

# ---------------------------------------
# ARMV7
# ---------------------------------------
    - stage: Builds & Tests
      name: "Build & Tests using GCC/G++ - armhf"

      script:
        # Build
        - docker run --rm -it -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc-armhf make all build_test
        # Test
        - docker run --rm --privileged multiarch/qemu-user-static:register
        - docker run --rm -it --network ci_default --link kuzzle -v "$(pwd)":/mnt kuzzleio/sdk-cross:armhf-cpp-runner make run_test

      before_deploy:
        - docker run --rm -it -e ARCH=armhf -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc-armhf make package

# ---------------------------------------
# ARMV8
# ---------------------------------------
    - stage: Builds & Tests
      name: "Build & Tests using GCC/G++ - aarch64"

      script:
        # Build
        - docker run --rm -it -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc-aarch64 make all build_test
        # Test
        - docker run --rm --privileged multiarch/qemu-user-static:register
        - docker run --rm -it --network ci_default --link kuzzle -v "$(pwd)":/mnt kuzzleio/sdk-cross:aarch64-cpp-runner make run_test

      before_deploy:
        - docker run --rm -it -e ARCH=aarch64 -v "$(pwd)":/mnt kuzzleio/sdk-cross:gcc-aarch64 make package

# ---------------------------------------------
# CLANG: Build & Test (AMD64 & i386 only)
# ---------------------------------------------
# AMD64
# ---------------------------------------
    - stage: Builds & Tests
      name: "Build & Tests using Clang - amd64"

      env:
        - COMPILATOR = "clang"

      script:
        # Build & Test
        - docker run --rm -it --network ci_default --link kuzzle -v "$(pwd)":/mnt kuzzleio/sdk-cross:clang make all build_test run_test

# ---------------------------------------
# I386
# ---------------------------------------
    - stage: Builds & Tests
      name: "Build & Tests using Clang - i386"

      env:
        - COMPILATOR = "clang"

      script:
        # Build & Test
        - docker run --rm -it --network ci_default --link kuzzle -v "$(pwd)":/mnt kuzzleio/sdk-cross:clang-i386 make all build_test run_test

